/*
 * This file is generated by jOOQ.
 */
package net.sync.game.database.schema;


import net.sync.game.database.schema.tables.Charts;
import net.sync.game.database.schema.tables.Songs;
import net.sync.game.database.schema.tables.records.ChartsRecord;
import net.sync.game.database.schema.tables.records.SongsRecord;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code></code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<SongsRecord, Integer> IDENTITY_SONGS = Identities0.IDENTITY_SONGS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChartsRecord> PK_CHARTS = UniqueKeys0.PK_CHARTS;
    public static final UniqueKey<SongsRecord> PK_SONGS = UniqueKeys0.PK_SONGS;
    public static final UniqueKey<SongsRecord> SQLITE_AUTOINDEX_SONGS_1 = UniqueKeys0.SQLITE_AUTOINDEX_SONGS_1;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ChartsRecord, SongsRecord> FK_CHARTS_SONGS_1 = ForeignKeys0.FK_CHARTS_SONGS_1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<SongsRecord, Integer> IDENTITY_SONGS = Internal.createIdentity(Songs.SONGS, Songs.SONGS.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ChartsRecord> PK_CHARTS = Internal.createUniqueKey(Charts.CHARTS, "pk_charts", new TableField[] { Charts.CHARTS.ID }, true);
        public static final UniqueKey<SongsRecord> PK_SONGS = Internal.createUniqueKey(Songs.SONGS, "pk_songs", new TableField[] { Songs.SONGS.ID }, true);
        public static final UniqueKey<SongsRecord> SQLITE_AUTOINDEX_SONGS_1 = Internal.createUniqueKey(Songs.SONGS, "sqlite_autoindex_songs_1", new TableField[] { Songs.SONGS.PACK, Songs.SONGS.DIRECTORY }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<ChartsRecord, SongsRecord> FK_CHARTS_SONGS_1 = Internal.createForeignKey(Keys.PK_SONGS, Charts.CHARTS, "fk_charts_songs_1", new TableField[] { Charts.CHARTS.SONG_ID }, true);
    }
}
