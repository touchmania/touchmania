/*
 * This file is generated by jOOQ.
 */
package net.sync.game.database.schema.tables;


import net.sync.game.database.schema.DefaultSchema;
import net.sync.game.database.schema.Keys;
import net.sync.game.database.schema.tables.records.ChartsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Charts extends TableImpl<ChartsRecord> {

    private static final long serialVersionUID = -728957503;

    /**
     * The reference instance of <code>charts</code>
     */
    public static final Charts CHARTS = new Charts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChartsRecord> getRecordType() {
        return ChartsRecord.class;
    }

    /**
     * The column <code>charts.id</code>.
     */
    public final TableField<ChartsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>charts.song_id</code>.
     */
    public final TableField<ChartsRecord, Integer> SONG_ID = createField(DSL.name("song_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>charts.hash</code>.
     */
    public final TableField<ChartsRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>charts.difficulty_class</code>.
     */
    public final TableField<ChartsRecord, String> DIFFICULTY_CLASS = createField(DSL.name("difficulty_class"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>charts.difficulty_meter</code>.
     */
    public final TableField<ChartsRecord, Integer> DIFFICULTY_METER = createField(DSL.name("difficulty_meter"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>charts.display_bpm</code>.
     */
    public final TableField<ChartsRecord, String> DISPLAY_BPM = createField(DSL.name("display_bpm"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>charts.name</code>.
     */
    public final TableField<ChartsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>charts.description</code>.
     */
    public final TableField<ChartsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>charts.credit</code>.
     */
    public final TableField<ChartsRecord, String> CREDIT = createField(DSL.name("credit"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>charts</code> table reference
     */
    public Charts() {
        this(DSL.name("charts"), null);
    }

    /**
     * Create an aliased <code>charts</code> table reference
     */
    public Charts(String alias) {
        this(DSL.name(alias), CHARTS);
    }

    /**
     * Create an aliased <code>charts</code> table reference
     */
    public Charts(Name alias) {
        this(alias, CHARTS);
    }

    private Charts(Name alias, Table<ChartsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Charts(Name alias, Table<ChartsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Charts(Table<O> child, ForeignKey<O, ChartsRecord> key) {
        super(child, key, CHARTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ChartsRecord> getPrimaryKey() {
        return Keys.PK_CHARTS;
    }

    @Override
    public List<UniqueKey<ChartsRecord>> getKeys() {
        return Arrays.<UniqueKey<ChartsRecord>>asList(Keys.PK_CHARTS);
    }

    @Override
    public List<ForeignKey<ChartsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChartsRecord, ?>>asList(Keys.FK_CHARTS_SONGS_1);
    }

    public Songs songs() {
        return new Songs(this, Keys.FK_CHARTS_SONGS_1);
    }

    @Override
    public Charts as(String alias) {
        return new Charts(DSL.name(alias), this);
    }

    @Override
    public Charts as(Name alias) {
        return new Charts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Charts rename(String name) {
        return new Charts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Charts rename(Name name) {
        return new Charts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Integer, String, String, Integer, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
