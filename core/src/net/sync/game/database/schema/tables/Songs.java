/*
 * This file is generated by jOOQ.
 */
package net.sync.game.database.schema.tables;


import net.sync.game.database.schema.DefaultSchema;
import net.sync.game.database.schema.Keys;
import net.sync.game.database.schema.tables.records.SongsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Songs extends TableImpl<SongsRecord> {

    private static final long serialVersionUID = 843799987;

    /**
     * The reference instance of <code>songs</code>
     */
    public static final Songs SONGS = new Songs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SongsRecord> getRecordType() {
        return SongsRecord.class;
    }

    /**
     * The column <code>songs.id</code>.
     */
    public final TableField<SongsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>songs.pack</code>.
     */
    public final TableField<SongsRecord, String> PACK = createField(DSL.name("pack"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.directory</code>.
     */
    public final TableField<SongsRecord, String> DIRECTORY = createField(DSL.name("directory"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.hash</code>.
     */
    public final TableField<SongsRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.sim_path</code>.
     */
    public final TableField<SongsRecord, String> SIM_PATH = createField(DSL.name("sim_path"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.format</code>.
     */
    public final TableField<SongsRecord, String> FORMAT = createField(DSL.name("format"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.title</code>.
     */
    public final TableField<SongsRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.subtitle</code>.
     */
    public final TableField<SongsRecord, String> SUBTITLE = createField(DSL.name("subtitle"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.artist</code>.
     */
    public final TableField<SongsRecord, String> ARTIST = createField(DSL.name("artist"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.genre</code>.
     */
    public final TableField<SongsRecord, String> GENRE = createField(DSL.name("genre"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.banner_path</code>.
     */
    public final TableField<SongsRecord, String> BANNER_PATH = createField(DSL.name("banner_path"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.background_path</code>.
     */
    public final TableField<SongsRecord, String> BACKGROUND_PATH = createField(DSL.name("background_path"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.album</code>.
     */
    public final TableField<SongsRecord, String> ALBUM = createField(DSL.name("album"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>songs.music_path</code>.
     */
    public final TableField<SongsRecord, String> MUSIC_PATH = createField(DSL.name("music_path"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>songs.sample_start</code>.
     */
    public final TableField<SongsRecord, Float> SAMPLE_START = createField(DSL.name("sample_start"), org.jooq.impl.SQLDataType.REAL.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.REAL)), this, "");

    /**
     * The column <code>songs.sample_length</code>.
     */
    public final TableField<SongsRecord, Float> SAMPLE_LENGTH = createField(DSL.name("sample_length"), org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * Create a <code>songs</code> table reference
     */
    public Songs() {
        this(DSL.name("songs"), null);
    }

    /**
     * Create an aliased <code>songs</code> table reference
     */
    public Songs(String alias) {
        this(DSL.name(alias), SONGS);
    }

    /**
     * Create an aliased <code>songs</code> table reference
     */
    public Songs(Name alias) {
        this(alias, SONGS);
    }

    private Songs(Name alias, Table<SongsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Songs(Name alias, Table<SongsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Songs(Table<O> child, ForeignKey<O, SongsRecord> key) {
        super(child, key, SONGS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SongsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SONGS;
    }

    @Override
    public UniqueKey<SongsRecord> getPrimaryKey() {
        return Keys.PK_SONGS;
    }

    @Override
    public List<UniqueKey<SongsRecord>> getKeys() {
        return Arrays.<UniqueKey<SongsRecord>>asList(Keys.PK_SONGS, Keys.SQLITE_AUTOINDEX_SONGS_1);
    }

    @Override
    public Songs as(String alias) {
        return new Songs(DSL.name(alias), this);
    }

    @Override
    public Songs as(Name alias) {
        return new Songs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Songs rename(String name) {
        return new Songs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Songs rename(Name name) {
        return new Songs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, String, String, String, String, String, String, String, String, String, String, String, String, String, Float, Float> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
